#!/bin/bash/env

PROJECT_ID=""
NAME="webuser"
VERBOSE="false"

usage() {
    printf "Usage $0: [project id] [name]\n"
    printf "default name: webuser\n"
}

check_python_lib() {
    LIB="$1"
    
    RET="$(python -c "help('"$LIB"');" | grep -c "$LIB")"
    if [[ "$RET" -le 2 ]]; then
        python -m pip install "$LIB" > /dev/null
    fi
}

if [ "$#" -lt 1 ] || [ "$#" -ge 3 ]; then
    usage
    return 1
fi

PROJECT_ID="$1"

if [[ -z "$PROJECT_ID" ]]; then
    usage
fi

# check if alredy exists the local project directory
if [[ ! -d "$(pwd)/$PROJECT_ID" ]]; then
    mkdir ${PROJECT_ID}
    cp -r "$(pwd)/template/"* "$(pwd)/$PROJECT_ID"
    sed -i 's/project_id_value/'$PROJECT_ID'/' "$(pwd)/${PROJECT_ID}/publisher.py"
    sed -i 's/project_id_value/'$PROJECT_ID'/' "$(pwd)/${PROJECT_ID}/subscriber.py"
fi

# check if the user is logged
export PROJECT_ID="$PROJECT_ID"
RET="$(/home/et/google-cloud-sdk/bin/gcloud projects list 2>&1)"

ERROR_GCLOUD="ERROR: (gcloud.projects.list) You do not currently have an active account selected."
CHECK="$(echo $RET | grep -c "$ERROR_GCLOUD")"

# log into gcloud platform interactive
if [[ CHECK -eq 1 ]]; then
    /home/et/google-cloud-sdk/bin/gcloud auth login
fi

# configure the gcloud project
RET="$(/home/et/google-cloud-sdk/bin/gcloud projects list --filter "$PROJECT_ID" 2>&1)"
if [[ "$RET" = "Listed 0 items." ]]; then
    echo "create the new project: $PROJECT_ID"
    /home/et/google-cloud-sdk/bin/gcloud projects create "$PROJECT_ID" --set-as-default 2>&1
else
    /home/et/google-cloud-sdk/bin/gcloud config set project "$PROJECT_ID"
fi

# check of the virtual environment
cd "$(pwd)/$PROJECT_ID"
if [[ ! -d "$(pwd)/.venv" ]]; then
    mkdir "$(pwd)/.venv"
    /usr/bin/python3 -m venv .venv
fi

source "$(pwd)/.venv/bin/activate"

# create il .gcloudignore
echo '.venv/*' > "$(pwd)/.gcloudignore"
echo 'credential.json' >> "$(pwd)/.gcloudignore"
echo '__pycache__/*' >> "$(pwd)/.gcloudignore"
echo '.venv/*' >> "$(pwd)/.gcloudignore"

# check if the library are alredy installed
check_python_lib "flask"
check_python_lib "google-api-core"
check_python_lib "google-cloud-firestore"
check_python_lib "google-cloud-pubsub"
check_python_lib "gunicorn"

# some utility
check_python_lib "flask-cors"
check_python_lib "flask-classful"

RET="$(/home/et/google-cloud-sdk/bin/gcloud iam service-accounts list | grep -c "$NAME")"
if [[ "$RET" -lt 1 ]]; then
    echo "create new user: $NAME"
    /home/et/google-cloud-sdk/bin/gcloud iam service-accounts create $NAME
fi

# could be rendundant
/home/et/google-cloud-sdk/bin/gcloud projects add-iam-policy-binding $PROJECT_ID --member "serviceAccount:${NAME}@${PROJECT_ID}.iam.gserviceaccount.com" --role "roles/owner"
/home/et/google-cloud-sdk/bin/gcloud iam service-accounts keys create credentials.json --iam-account ${NAME}@${PROJECT_ID}.iam.gserviceaccount.com

export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/credentials.json

if [[ ":$PATH:" != ":$HOME/esercitazioni/bin"* ]]; then
        export PATH="$HOME/esercitazioni/bin:$PATH"
fi
